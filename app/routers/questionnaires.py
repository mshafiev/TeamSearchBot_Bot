import asyncio
import logging
import sys
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, html, F, types, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
import app.states as st
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from api_client import APIClient, OlympsData
import app.keyboards as kb
import app.functions as func
from api_client import client, UserData
from recsys_client import RecSysClient
from producer import send_like_message
from app.states import IncomingLikes
from app.keyboards import incoming_like_reaction_keyboard


router = Router()
recsys = RecSysClient()

@router.message(F.text.lower() == "—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ")
async def view_questionnaires(message: Message, state: FSMContext, bot: Bot):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    """
    user = client.get_user(tg_id=str(message.from_user.id))
    user_id = str(message.from_user.id)
    ex = client.get_last_likes(str(message.from_user.id), 3)
    print(ex)
    excluded = []  
    recommendation = recsys.get_recommendation(user_id, excluded)
    
    if recommendation:
        rec_user = client.get_user(tg_id=recommendation)
        await state.update_data(
            current_user_id=recommendation, 
            excluded_ids=excluded,
            user_id=user_id
        )
        await state.set_state(st.ViewingQuestionnaires.questionnaire)
        await func.send_user_profile(rec_user, message, bot)
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:", reply_markup=kb.rating_keyboard)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –≤–∞—Å üòî")

@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "üëç")
async def like_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –∞–Ω–∫–µ—Ç—ã: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∞–π–∫–∞ –≤ RMQ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
    """
    data = await state.get_data()
    current_user_id = data.get("current_user_id")
    
    if not current_user_id:
        await message.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ RabbitMQ
    await send_like_message(
        from_user_tg_id=str(message.from_user.id),
        to_user_tg_id=str(current_user_id),
        text=None,
        is_like=True,
        is_readed=False
    )

    # 2) –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥—Ä–µ—Å–∞—Ç–∞: "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å" (–µ—Å–ª–∏ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –µ–º—É)
    try:
        await bot.send_message(chat_id=current_user_id, text="–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å üíô", reply_markup=kb.incoming_likes_keyboard)
    except Exception:
        pass

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∞–π–∫ current_user_id -> from_user (True)
    try:
        exists_resp = client.like_exists(from_user_tg_id=str(current_user_id), to_user_tg_id=str(message.from_user.id), is_like=True)
        is_mutual = bool(exists_resp.get("exists"))
    except Exception:
        is_mutual = False

    if is_mutual:
        # –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –∞–Ω–∫–µ—Ç—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        me = client.get_user(tg_id=str(message.from_user.id))
        other = client.get_user(tg_id=str(current_user_id))
        # –ú–Ω–µ ‚Äî –∞–Ω–∫–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ + —Ç–µ–ª–µ—Ñ–æ–Ω
        await message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è ‚ú®")
        await func.send_user_profile(other, message, bot)
        if other.get("phone"):
            await message.answer(f"–ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {other['phone']}")
        # –°–æ–±–µ—Å–µ–¥–Ω–∏–∫—É ‚Äî –º–æ—è –∞–Ω–∫–µ—Ç–∞ + —Ç–µ–ª–µ—Ñ–æ–Ω
        try:
            await bot.send_message(chat_id=current_user_id, text="–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è ‚ú®")
            dummy_msg = types.Message(message_id=0, date=message.date, chat=message.chat)
            await func.send_user_profile(me, dummy_msg, bot)
            if me.get("phone"):
                await bot.send_message(chat_id=current_user_id, text=f"–ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {me['phone']}")
        except Exception:
            pass

    # 4) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
    await show_next_profile(message, state, bot)

@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "üëé")
async def dislike_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –∞–Ω–∫–µ—Ç—ã
    """
    data = await state.get_data()
    current_user_id = data.get("current_user_id")
    
    if current_user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫ –≤ RabbitMQ
        await send_like_message(
            from_user_tg_id=str(message.from_user.id),
            to_user_tg_id=str(current_user_id),
            text=None,
            is_like=False,
            is_readed=False
        )
        
        await state.set_state(st.ViewingQuestionnaires.questionnaire)
        
        await message.answer("üëé –î–∏–∑–ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await show_next_profile(message, state, bot)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "üí§")
async def go_back(message: Message, state: FSMContext, bot: Bot):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)

@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "‚úèÔ∏è")
async def start_message_mode(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–∞–π–∫–æ–º
    """
    await state.set_state(st.ViewingQuestionnaires.message)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=ReplyKeyboardRemove())

@router.message(st.ViewingQuestionnaires.message)
async def send_message_with_like(message: Message, state: FSMContext, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∞–π–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    data = await state.get_data()
    current_user_id = data.get("current_user_id")
    excluded_ids = data.get("excluded_ids", [])
    
    if current_user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ RabbitMQ
        await send_like_message(
            from_user_tg_id=str(message.from_user.id),
            to_user_tg_id=str(current_user_id),
            text=message.text,
            is_like=True,
            is_readed=False
        )
        await state.set_state(st.ViewingQuestionnaires.questionnaire)
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await show_next_profile(message, state, bot)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def show_next_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    """
    ex = client.get_last_likes(str(message.from_user.id), 3)
    # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ex ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –µ—Å—Ç—å –∫–ª—é—á 'to_user_tg_id'
    excluded_ids = [e['to_user_tg_id'] for e in ex] if ex else []
    user_id = str(message.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    recommendation = recsys.get_recommendation(user_id, excluded_ids)
    
    if recommendation:
        rec_user = client.get_user(tg_id=recommendation)
        await state.update_data(current_user_id=recommendation)
        await func.send_user_profile(rec_user, message, bot)
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:", reply_markup=kb.rating_keyboard)
    else:
        await message.answer("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main)
        await state.clear()

@router.message(F.text == "–ö–æ–º—É —è –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–∞—Å—å) ‚ù§Ô∏è")
async def ask_incoming_likes(message: Message, state: FSMContext):
    await state.set_state(IncomingLikes.asking)
    await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö, –∫–æ–º—É –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å?", reply_markup=kb.incoming_likes_keyboard)

@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å, –∫–æ–º—É —è –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–∞—Å—å) ‚ù§Ô∏è")
async def start_show_incoming_likes(message: Message, state: FSMContext, bot: Bot):
    await state.set_state(IncomingLikes.viewing)
    await show_next_incoming_like(message, state, bot)

@router.message(IncomingLikes.asking, F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_from_ask(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)

async def show_next_incoming_like(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    likes = client.get_incoming_likes(user_tg_id=user_id, only_unread=True, count=1)
    if not likes:
        await state.clear()
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.main)
        return
    like = likes[0]
    from_id = like.get("from_user_tg_id")
    liker = client.get_user(tg_id=from_id)
    # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π, —Ä–∞–∑ –ø–æ–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        client.set_like_readed(from_user_tg_id=str(from_id), to_user_tg_id=user_id)
    except Exception:
        pass
    await state.update_data(current_incoming_from_id=from_id)
    await func.send_user_profile(liker, message, bot)
    await message.answer("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç?", reply_markup=incoming_like_reaction_keyboard)

@router.message(IncomingLikes.viewing, F.text == "–õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç")
async def like_back_incoming(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    from_id = data.get("current_incoming_from_id")
    if not from_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ–≥–æ –ª–∞–π–∫–Ω—É—Ç—å", reply_markup=kb.main)
        await state.clear()
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å (–≤—Ö–æ–¥—è—â–∏–π –ª–∞–π–∫ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π)
    exists_resp = client.like_exists(from_user_tg_id=str(from_id), to_user_tg_id=str(message.from_user.id), is_like=True)
    is_mutual = bool(exists_resp.get("exists"))
    if is_mutual:
        me = client.get_user(tg_id=str(message.from_user.id))
        other = client.get_user(tg_id=str(from_id))
        await message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è ‚ú®")
        await func.send_user_profile(other, message, bot)
        if other.get("phone"):
            await message.answer(f"–ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {other['phone']}")
        try:
            await bot.send_message(chat_id=str(from_id), text="–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è ‚ú®")
            await func.send_user_profile_to_chat(me, chat_id=str(from_id), bot=bot)
            if me.get("phone"):
                await bot.send_message(chat_id=str(from_id), text=f"–ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {me['phone']}")
        except Exception:
            pass
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏ –µ—â–µ –Ω–µ—Ç
        await send_like_message(
            from_user_tg_id=str(message.from_user.id),
            to_user_tg_id=str(from_id),
            text=None,
            is_like=True,
            is_readed=False
        )
        await message.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await show_next_incoming_like(message, state, bot)

@router.message(IncomingLikes.viewing, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_incoming_like(message: Message, state: FSMContext, bot: Bot):
    # –õ–∞–π–∫ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
    await show_next_incoming_like(message, state, bot)

@router.message(IncomingLikes.viewing, F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_from_viewing(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)

