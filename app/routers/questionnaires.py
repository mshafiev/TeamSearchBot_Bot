import asyncio
import logging
import sys
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, html, F, types, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
import app.states as st
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from api_client import APIClient, OlympsData
import app.keyboards as kb
import app.functions as func
from api_client import client, UserData
from recsys_client import RecSysClient
from producer import send_like_message


router = Router()
recsys = RecSysClient()

@router.message(F.text.lower() == "—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ")
async def view_questionnaires(message: Message, state: FSMContext, bot: Bot):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    """
    user = client.get_user(tg_id=message.from_user.id)
    user_id = message.from_user.id
    ex = client.get_last_likes(message.from_user.id, 3)
    print(ex)
    excluded = []  
    recommendation = recsys.get_recommendation(user_id, excluded)
    
    if recommendation:
        rec_user = client.get_user(tg_id=recommendation)
        await state.update_data(
            current_user_id=recommendation, 
            excluded_ids=excluded,
            user_id=user_id
        )
        await state.set_state(st.ViewingQuestionnaires.questionnaire)
        await func.send_user_profile(rec_user, message, bot)
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:", reply_markup=kb.rating_keyboard)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –≤–∞—Å üòî")

@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "üëç")
async def like_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –∞–Ω–∫–µ—Ç—ã
    """
    data = await state.get_data()
    current_user_id = data.get("current_user_id")
    excluded_ids = data.get("excluded_ids", [])
    
    if current_user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ RabbitMQ
        await send_like_message(
            from_user_tg_id=message.from_user.id,
            to_user_tg_id=current_user_id,
            text=None,
            is_like=True,
            is_readed=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        excluded_ids.append(str(current_user_id))
        await state.update_data(excluded_ids=excluded_ids)
        
        await message.answer("üëç –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await show_next_profile(message, state, bot)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "üëé")
async def dislike_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –∞–Ω–∫–µ—Ç—ã
    """
    data = await state.get_data()
    current_user_id = data.get("current_user_id")
    
    if current_user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫ –≤ RabbitMQ
        await send_like_message(
            from_user_tg_id=message.from_user.id,
            to_user_tg_id=current_user_id,
            text=None,
            is_like=False,
            is_readed=False
        )
        
        await state.set_state(st.ViewingQuestionnaires.questionnaire)
        
        await message.answer("üëé –î–∏–∑–ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await show_next_profile(message, state, bot)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "üí§")
async def go_back(message: Message, state: FSMContext, bot: Bot):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)

@router.message(st.ViewingQuestionnaires.questionnaire, F.text == "‚úèÔ∏è")
async def start_message_mode(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–∞–π–∫–æ–º
    """
    await state.set_state(st.ViewingQuestionnaires.message)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=ReplyKeyboardRemove())

@router.message(st.ViewingQuestionnaires.message)
async def send_message_with_like(message: Message, state: FSMContext, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∞–π–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    data = await state.get_data()
    current_user_id = data.get("current_user_id")
    excluded_ids = data.get("excluded_ids", [])
    
    if current_user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ RabbitMQ
        await send_like_message(
            from_user_tg_id=message.from_user.id,
            to_user_tg_id=current_user_id,
            text=message.text,
            is_like=True,
            is_readed=False
        )
        await state.set_state(st.ViewingQuestionnaires.questionnaire)
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await show_next_profile(message, state, bot)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def show_next_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    """
    ex = client.get_last_likes(message.from_user.id, 3)
    # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ex ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –µ—Å—Ç—å –∫–ª—é—á 'to_user_tg_id'
    excluded_ids = [int(e['to_user_tg_id']) for e in ex] if ex else []
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    recommendation = recsys.get_recommendation(user_id, ",".join(str(e) for e in excluded_ids))
    
    if recommendation:
        rec_user = client.get_user(tg_id=recommendation)
        await state.update_data(current_user_id=recommendation)
        await func.send_user_profile(rec_user, message, bot)
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:", reply_markup=kb.rating_keyboard)
    else:
        await message.answer("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main)
        await state.clear()

